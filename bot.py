import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7853106555:AAGmG4SGQzkKvxPnBu0OWMl0m38YTSnBkgE"
API_URL = "http://127.0.0.1:8000"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫"), KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≤–µ–±—Ö—É–∫–∏")]
    ],
    resize_keyboard=True
)



@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —Å –≤–µ–±—Ö—É–∫–∞–º–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")
async def send_webhook(message: types.Message):
    data = {"event": "tg_message", "payload": f"User {message.from_user.id} sent a webhook"}
    response = requests.post(f"{API_URL}/webhook", json=data)
    await message.answer(f" –í–µ–±—Ö—É–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.json()}")


@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –≤–µ–±—Ö—É–∫–∏")
async def get_webhooks(message: types.Message):
    response = requests.get(f"{API_URL}/webhooks")
    data = response.json()
    if not data:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤.")
        return

    text = "\n".join([f"üîπ {w['id']}: {w['event']} ‚Üí {w['payload']}" for w in data[-5:]])
    await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ–±—Ö—É–∫–∏:\n{text}")



async def main():
    #dp.startup.register(start)
    #dp.startup.register(send_webhook)
    #dp.startup.register(get_webhooks)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
